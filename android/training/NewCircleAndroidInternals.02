==============================================================================
Native Layer
==============================================================================

Why needed?
 - We have Java so we need to cleanly open files at Kernel level, this where
   C++ comes in
 - Speed, think about having Sqlite written in C++ or Java
 - Reuse of Libraries e.g. libcamera, libgps

==============================================================================
Bionic Library
==============================================================================

Custom standard C library
Faster than libc
Cross Compilation

==============================================================================
User Space Hardware Abstraction Layer (HAL)
==============================================================================

Userspace C/C++ hardware abstraction layer as shared libraries
Makes porting easier
Link! source.android.com
Talked about Sensors
ToDo! Sensor Fusion @ Wikipedia

 goog senso lib.so
     sensors.h
 -----------------
        api
 -----------------
 sensors.intel.so
 -----------------
 Acce   Mag   Gyro

 Link! http://source.android.com/devices/sensors/
 Link! ~/aosp/hardware/libhardware/include/hardware
  - Camera
  - NFC
  - Audio
  - Etc ...
 Looked at sensors.h

 Pointers to a Function
 How functions are activated?
 Example! Look at activate function in both files
 Link! ~/aosp/hardware/libhardware/include/hardware/sensors.h
 Link! ~/aosp/hardware/invensense/6515/libsensors_iio$ nano sensors_mpl.cpp

 Nexxus TV uses Intel

 ToDo! Find out about HDMI code in the next directories/files
 Link! ~/aosp/hardware/intel/audio_media/hdmi
       struct audio_module HAL_MODULE_INFO_SYM = { ...
       adev->hw_device.
       out->pcm = pcm_open(adev->card, adev->device, PCM_OUT, &out->pcm_config);
 Link! ~/aosp/external/tinyalsa/pcm.c
        struct pcm *pcm_open(unsigned int card, unsigned int device,
 Vendor specific
 Link! ~/aosp/device/
 Link! ~/aosp/device/asus/fugu

 Vibrator

 ToDo! Find out about Vibrator code starting at this directory
 Link! ~/aosp/hardware/libhardware_legacy/vibrator/vibrator.c
 Function may come prepackage as an *.so

 Audio

 ToDo! Find out about Audio code starting at this directory
 Link! ~/aosp/hardware/intel/audio_media/hdmi/tinyaudio_hw.c
       static int get_card_number_by_name(const char* name)

 More about Hardware Components

 Look at this link
 Link! http://developers.google.com/android/nexus/drivers
 Now download Fugu Intel intel-fugu-lrx21m-4bd2d189.tgz, decompress and look
 at its content
 Link! https://developers.google.com/android/nexus/drivers#fugu
 
 vendor/
 vendor/asus/
 vendor/asus/fugu/
 vendor/asus/fugu/device-vendor.mk
 vendor/asus/fugu/BoardConfigVendor.mk
 vendor/intel/
 vendor/intel/fugu/
 vendor/intel/fugu/proprietary/
 vendor/intel/fugu/proprietary/libhardware_legacy.so
 vendor/intel/fugu/proprietary/bcc.moorefield
 vendor/intel/fugu/proprietary/libRSCpuRef.so

 Sensor Hub

 Classic version of how this used to be handle? CPU taking care of Sensors
 There is a need to have a lot of sensors running
 Today it seems sensors seats in a coprocessor which is a low power ic
 Integrated Sensor Hub

 Host <> Coprocessor

 ToDo! Look at any Platform Service Hub (PSH) QC SoC Block Diagram
 Link! http://en.wikipedia.org/wiki/Atom_%28system_on_chip%29#Merrifield_and_Moorefield_smartphone_platforms
 Link! http://www.anandtech.com/show/7789/intel-talks-merrifield-moorefield-and-lte-at-mwc-2014
 In Summary
  Activate Sensor.h
  Call sensor.cpp
  Call coprocessor.cpp
  Call sensor specific
 At Kernel level look at
  KernelCode! drivers/hid/hid-sensor-hub.c
  KernelCode! Documentation/hid/
 More about Sensors
 Link! source.android.com/devices/sensors/batching.html

 How to load Vendor Shared Objects (.so)

 Follow some kind of template and put the files inside 2 folders
  vendor/lib/hw
  system/lib/hw
 First part of the name are defined by Google
 Second part of the name is important cause is the specific board name where
 hardware is hosted, e.g.
  - camera.tegra123.so
  - camera.flounder.so
 Remember! CPU name Vs Board Name, it is all about naming
 $ getprop | grep ro.product.board
 $ getprop | grep ro.board.platform
 $ getprop | grep ro.prod

=============================================================================
Alpha Product
=============================================================================

If you want to work with full Alpha product clone this repo into
~/aosp/devices/newcircle/
$ git clone https://github.com/thenewcircle/alpha.git
$ cd ~/alpha
$ git checkout -b myx86 origin/x86

Basics for adding a Product

$ cd ~/aosp/device
$ mkdir newcircle/
$ cd newcircle
$ mkdir alpha
$ cd alpha
$ nano vendorsetup.sh

Android will look for specific files, in this case vendorsetup.sh, a file
that defines the build system, you can find up to 3 devices configurations,
add a configuration with add_lunch_combo plus its name, 3 build types
- Engineering
- User Debug
- User

# Start Content vendorsetup.sh

 add_lunch_combo full_alpha-eng
 add_lunch_combo full_alpha-userdebug
 add_lunch_combo full_alpha-user

# End Content vendorsetup.sh

For Minnowboard Android on IA (minnowboard.org && 01.org)

./device/intel/baytrail/vendorsetup.sh

$ source build/envsetup.sh
$ build

=============================================================================
Other Notable Native Daemons
=============================================================================

Application / Java / Class / ByteCode
Java Virtual Machine C/C++
Native Instruction Set

Middleware / System Service
JAR File | Java Virtual Machine
C++
Init Process

/system/bin/servicemanager
/system/bin/vold
/system/bin/sdcard
/system/bin/installd
/system/bin/adbd

$ ps -aux | grep /system/bin
$ ps -aux | grep com.

Daemon is called Service in Android
Daemons run in background and perform specific operations

=============================================================================
Surface Flinger, Other Native Executables
=============================================================================

The term Flinger is the "device" that combines either the visual surfaces or
the audio output from multiple applications into a common stream that is sent
to hardware. Surface and Audio flingers present.

=============================================================================
Function Libraries
=============================================================================

Computation intensive services to the rest of the platform
Many borrowed from Open source projects

=============================================================================
Application Runtime 1.0 Dalvik
=============================================================================

Custom implementation of a Virtual Machine
Take .java to .class and convert it to .dex file
JIT Support <> Just in Time

Working Example

 $ cd /data/app
 $ cd com.skype.raider-1
 $ ls .
 base.apk
 Apk is a Zip file, see its content
 $ ls unzipped file
 AndroidManifest.xml
 classes.dex
 com/
 assests/
 ...

=============================================================================
Application Runtime 2.0 ART
=============================================================================

Successor to Dalvik introduced in Android 4.4
Take .java to .class to .dex to .oat
OAT Ahead Of Time
Garage Collections enhacements
ToDo! Google "Google IO 2014 Art" and watch the Youtube video

Code of compiled Apps goes to /data/dalvik-cache/
$ cd /data/dalvik-cache/arm64/
$ oatdump --oat-file=system@priv-app@SystemUI.apk@classes.dex
$ ll /data/dalvik-cache
$ objdump -t system@priv-app@SystemUI.apk@classes.dex

Default applications are pre-compiled
.odex optimized dex code is a compressed dex code
$ ls /system/framework/arm64/*.odex

ToDo! Learn more about .dex and .odex files

=============================================================================
Apk Installation
=============================================================================

AndroidManifest.xml is read, insctruction how to install
Divided what need to be what
$ ls ~/aosp/packages/

Artifacts are resources files

A folder is created under /data/data/
$ ls /data/data/com.skype.raider/

A folder is created under /data/dalvik-cached
$ ls /data/dalvik-cached

# End of File
